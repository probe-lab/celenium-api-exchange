openapi: 3.1.0
info:
  title: ProbeLab API
  summary: ProbeLab API for awesome metrics ðŸ’«
  description: |
    The ProbeLab API offers endpoints for retrieving detailed network 
    metrics.

    This API loosely follows the [Google JSON Style Guide](https://google.github.io/styleguide/jsoncstyleguide.xml).
    This means, all successful responses will only have a `data` field
    containing the payload. All error responses will only have an `error` field
    containing at least a `message` field with an error description. Following
    the style guide, if there are multiple errors the `error` object will
    contain another `errors` array.

  version: 0.5.0
  contact:
    name: ProbeLab Team
    url: https://probelab.io
    email: team@probelab.io
servers:
  - url: 'https://api.probelab.io'
    description: Production

security:
  - ApiKeyAuth: []

paths:
  /v1/projects/celestia/networks/{network}/stats/country:
    get:
      tags:
        - Celestia
      summary: Celestia peer country distribution
      description: |
        This endpoint returns the number of peers we have found in a given
        interval in a specific country. You can request multiple intervals
        at once by spanning a large enough time range with the `start` and `end`
        query parameters. Check the different path and query parameter
        documentation below.
        
        The maximum number of data points that this endpoint returns is `512`.
        The number of data points is derived by dividing the `start` and `end`
        time range by the `interval` duration. This is an arbitrary limitation
        and if you need different limits, let us know at [team@probelab.io](team@probelab.io).
        
        The default data points granularity (`interval`) is 1h and the
        minimum is 10 minutes. Any interval that's a multiple of 10 minutes is
        valid.
        
        Check out the documentation of the response schema to learn more about
        the idiosyncrasies of the data.

      operationId: getCelestiaStatsCountry
      parameters:
        - $ref: '#/components/parameters/requestID'
        - $ref: '#/components/parameters/celestiaNetwork'
        - $ref: '#/components/parameters/start'
        - $ref: '#/components/parameters/end'
        - $ref: '#/components/parameters/nodeTypes'
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: object
                    allOf:
                      - $ref: '#/components/schemas/CommonStatisticsResponseFields'
                      - properties:
                          statistic:
                            type: string
                            description: |
                              Mirroring back the statistic that the data represents.
                              For this endpoint the value will always be `country`.
                          columns:
                            type: array
                            items:
                              type: string
                            description: |
                              At each timestamp (`index` entry) we will have
                              values for various countries. This `columns` array will
                              contain [ISO 3166-1](https://en.wikipedia.org/wiki/ISO_3166-1)
                              alpha-2 codes like `US`, `GR`, or `FR`. If a peer was
                              seen in more than one country in the specified time
                              interval, the peer only counts towards the latest
                              country in the interval. So for example if the
                              aggregation interval is 1h and after a minute we see
                              peer A in the US and after another 30 minutes we see
                              the same peer A in FR, the peer is only counted towards
                              France.
                              
                              In the data there is one special case where we were not
                              able to geolocate a peer. In this case the array will
                              contain the value `unknown`.
                example:
                  data:
                    start: "2024-12-05T00:00:00"
                    end: "2024-12-05T02:00:00"
                    interval: 3600
                    statistic: "country"
                    project: "celestia"
                    network: "mainnet"
                    index:
                      - "2024-12-05T00:00:00"
                      - "2024-12-05T01:00:00"
                    columns:
                      - "unknown"
                      - "FR"
                      - "ES"
                    values:
                      - [ 2, 124, 17]
                      - [ 1, 123, 17]

        '400':
          description: Bad Request
          $ref: '#/components/responses/ErrorResponse'
        '401':
          description: Unauthorized
          $ref: '#/components/responses/ErrorResponse'

  /v1/projects/celestia/networks/{network}/stats/city:
    get:
      tags:
        - Celestia
      summary: Celestia peer city distribution
      description: |
        This endpoint returns the number of peers we have found in a given
        interval in a specific city. You can request multiple intervals
        at once by spanning a large enough time range with the `start` and `end`
        query parameters. Check the different path and query parameter
        documentation below.
        
        The maximum number of data points that this endpoint returns is `512`.
        The number of data points is derived by dividing the `start` and `end`
        time range by the `interval` duration. This is an arbitrary limitation
        and if you need different limits, let us know at [team@probelab.io](team@probelab.io).
        
        The default data points granularity (`interval`) is 1h and the
        minimum is 10 minutes. Any interval that's a multiple of 10 minutes is
        valid.
        
        Keep in mind that we geolocate peers by their IP addresses. This means
        the data accuracy is determined by the IP geolocation service being used.
        We collaborate with [ipregistry.co](ipregistry.co). City-level geolocations
        are often only accurate to a 50km (~30 miles) radius.
        
        Check out the documentation of the response schema to learn more about
        the idiosyncrasies of the data.

      operationId: getCelestiaStatsCity
      parameters:
        - $ref: '#/components/parameters/requestID'
        - $ref: '#/components/parameters/celestiaNetwork'
        - $ref: '#/components/parameters/start'
        - $ref: '#/components/parameters/end'
        - $ref: '#/components/parameters/nodeTypes'
        - $ref: '#/components/parameters/cityFormat'
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: object
                    allOf:
                      - $ref: '#/components/schemas/CommonStatisticsResponseFields'
                      - properties:
                          statistic:
                            type: string
                            description: |
                              Mirroring back the statistic that the data represents.
                              For this endpoint the value will always be `city`.
                          columns:
                            type: array
                            items:
                              type: string
                            description: |
                              For each index entry (timestamp) we can have multiple
                              values that correspond to that index.
                              In the case of the `city` statistic this array will
                              contain geohash+city name combinations formatted like
                              `$geo_hash,$city_name` by default. The format can be
                              configured with the `format` query parameter. See the
                              corresponding documentation. Note that there can be
                              multiple different geo hashes for the same city name.
                              Similar to the `country` statistic, only the latest
                              city in the time interval is considered. This array
                              may also contain entries that correspond to unknown
                              locations of peers. These will appear in the resulting
                              array as `s00000000,unknown` in the default formatting
                              case. `s00000000` corresponds to the lat/long values
                              of `0`, `0`. The full format for an unknown city is
                              `unknown,unknown,s00000000000,0,0,unknown`.
                example:
                  data:
                    start: "2024-12-05T00:00:00"
                    end: "2024-12-05T02:00:00"
                    interval: 3600
                    statistic: "city"
                    project: "celestia"
                    network: "mainnet"
                    index:
                      - "2024-12-05T00:00:00"
                      - "2024-12-05T01:00:00"
                    columns:
                      - "s00000000000,unknown"
                      - "69y7hj5ttkde,Caseros"
                      - "6e9dch78y512,Salta"
                    values:
                      - [ 1, 124, 17 ]
                      - [ 3, 123, 17 ]

        '400':
          description: Bad Request
          $ref: '#/components/responses/ErrorResponse'
        '401':
          description: Unauthorized
          $ref: '#/components/responses/ErrorResponse'

  /v1/projects/celestia/networks/{network}/stats/version:
    get:
      tags:
        - Celestia
      summary: Celestia peer version distribution
      description: |
        This endpoint returns the number of peers we have found in a given
        interval running a specific version. You can request multiple intervals
        at once by spanning a large enough time range with the `start` and `end`
        query parameters. Check the different path and query parameter
        documentation below.
        
        The data of this endpoint only makes sense if you provide the `nodeTypes`
        filter with a single value as a query parameter.
        
        The maximum number of data points that this endpoint returns is `512`.
        The number of data points is derived by dividing the `start` and `end`
        time range by the `interval` duration. This is an arbitrary limitation
        and if you need different limits, let us know at [team@probelab.io](team@probelab.io).
        
        The default data points granularity (`interval`) is 1h and the
        minimum is 10 minutes. Any interval that's a multiple of 10 minutes is
        valid.
        
        Check out the documentation of the response schema to learn more about
        the idiosyncrasies of the data.

      operationId: getCelestiaStatsVersion
      parameters:
        - $ref: '#/components/parameters/requestID'
        - $ref: '#/components/parameters/celestiaNetwork'
        - $ref: '#/components/parameters/start'
        - $ref: '#/components/parameters/end'
        - $ref: '#/components/parameters/nodeTypes'
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: object
                    allOf:
                      - $ref: '#/components/schemas/CommonStatisticsResponseFields'
                      - properties:
                          statistic:
                            type: string
                            description: |
                              Mirroring back the statistic that the data represents.
                              For this endpoint the value will always be `version`
                          columns:
                            type: array
                            items:
                              type: string
                            description: |
                              For each index entry (timestamp) we can have multiple
                              values that correspond to that index. Here this array
                              will contain a lexicographically sorted list of valid
                              semver strings containing the major, minor and patch
                              components.
                example:
                  data:
                    start: "2024-12-05T00:00:00"
                    end: "2024-12-05T02:00:00"
                    interval: 3600
                    statistic: "version"
                    project: "celestia"
                    network: "mainnet"
                    index:
                      - "2024-12-05T00:00:00"
                      - "2024-12-05T01:00:00"
                      - "2024-12-05T02:00:00"
                    columns:
                      - "0.17.1"
                      - "0.20.0"
                    values:
                      - [ 124, 17]
                      - [ 123, 17]
                      - [ 180, 25]

        '400':
          description: Bad Request
          $ref: '#/components/responses/ErrorResponse'
        '401':
          description: Unauthorized
          $ref: '#/components/responses/ErrorResponse'

  /v1/projects/celestia/networks/{network}/stats/nodetype:
    get:
      tags:
        - Celestia
      summary: Celestia peer node type distribution
      description: |
        This endpoint returns the number of peers we have found in a given
        interval running a specific client implementation (node type). You can
        request multiple intervals at once by spanning a large enough time range
        with the `start` and `end` query parameters. Check the different path
        and query parameter documentation below.
        
        The maximum number of data points that this endpoint returns is `512`.
        The number of data points is derived by dividing the `start` and `end`
        time range by the `interval` duration. This is an arbitrary limitation
        and if you need different limits, let us know at [team@probelab.io](team@probelab.io).
        
        The default data points granularity (`interval`) is 1h and the
        minimum is 10 minutes. Any interval that's a multiple of 10 minutes is
        valid.
        
        Check out the documentation of the response schema to learn more about
        the idiosyncrasies of the data.

      operationId: getCelestiaStatsNodeType
      parameters:
        - $ref: '#/components/parameters/requestID'
        - $ref: '#/components/parameters/celestiaNetwork'
        - $ref: '#/components/parameters/start'
        - $ref: '#/components/parameters/end'
        - $ref: '#/components/parameters/nodeTypes'
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: object
                    allOf:
                      - $ref: '#/components/schemas/CommonStatisticsResponseFields'
                      - properties:
                          statistic:
                            type: string
                            description: |
                              Mirroring back the statistic that the data represents.
                              For this endpoint the value will always be `nodetype`
                          columns:
                            type: array
                            items:
                              type: string
                            description: |
                              For each index entry we can have multiple values that
                              correspond to that index. In the case of the `nodetype`
                              statistic we can have values for multiple node types
                              at each timestamp. This `columns` array will contain
                              an ordered list of node types. The ordering corresponds
                              to the values array of arrays below.
                example:
                  data:
                    start: "2024-12-05T00:00:00"
                    end: "2024-12-05T02:00:00"
                    interval: 3600
                    statistic: "nodetype"
                    project: "celestia"
                    network: "mainnet"
                    index:
                      - "2024-12-05T00:00:00"
                      - "2024-12-05T01:00:00"
                    columns:
                      - "bridge"
                      - "full"
                      - "light"
                      - "other"
                    values:
                      - [ 124, 17, 229, 33 ]
                      - [ 123, 17, 229, 33 ]

        '400':
          description: Bad Request
          $ref: '#/components/responses/ErrorResponse'
        '401':
          description: Unauthorized
          $ref: '#/components/responses/ErrorResponse'

  /v1/projects/celestia/networks/{network}/stats/connection:
    get:
      tags:
        - Celestia
      summary: Celestia peer connection distribution
      description: |
        This endpoint returns the number of peers we have found to interact
        with network with a given connection type with the network. This can
        range from mobile or datacenter connections to VPN or Tor ones.
        
        You can request multiple intervals at once by spanning a large enough time range
        with the `start` and `end` query parameters. Check the different path
        and query parameter documentation below.
        
        The maximum number of data points that this endpoint returns is `512`.
        The number of data points is derived by dividing the `start` and `end`
        time range by the `interval` duration. This is an arbitrary limitation
        and if you need different limits, let us know at [team@probelab.io](team@probelab.io).
        
        The default data points granularity (`interval`) is 1h and the
        minimum is 10 minutes. Any interval that's a multiple of 10 minutes is
        valid.
        
        Check out the documentation of the response schema to learn more about
        the idiosyncrasies of the data.

      operationId: getCelestiaConnection
      parameters:
        - $ref: '#/components/parameters/requestID'
        - $ref: '#/components/parameters/celestiaNetwork'
        - $ref: '#/components/parameters/start'
        - $ref: '#/components/parameters/end'
        - $ref: '#/components/parameters/nodeTypes'
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: object
                    allOf:
                      - $ref: '#/components/schemas/CommonStatisticsResponseFields'
                      - properties:
                          statistic:
                            type: string
                            description: |
                              Mirroring back the statistic that the data represents.
                              For this endpoint the value will always be `connection`
                          columns:
                            type: array
                            items:
                              type: string
                              enum:
                                - unknown
                                - vpn
                                - tor
                                - datacenter
                                - proxy
                                - relay
                                - bogon
                                - mobile
                                - education
                                - government
                                - regular
                            description: |
                              For each index entry we can have multiple values that
                              correspond to that index. In the case of the `connection`
                              statistic we can have values for multiple connection types
                              at each timestamp. This `columns` array will contain
                              an ordered list of the following connection types:
                                
                                - `unknown` - number of peers we couldn't associate with one of the other types
                                - `vpn` - number of peers connecting to the network via a known VPN
                                - `tor` - number of peers connecting to the network via a Tor exit relay node, middle relay node or a bridge.
                                - `datacenter` - number of peers connecting from a known datacenter IP
                                - `proxy` - number of peers connecting to the network through a known proxy including HTTP/HTTPS/SSL/SOCKS/CONNECT and transparent proxies.
                                - `relay` - number of peers connecting to the network via a known relay. This is different from proxy as relays are not designed to bypass geo-controls but instead pool multiple users behind the same IP. At this time, only Apple Private Relay IP addresses are detected.
                                - `mobile` - number of peers connecting to the network via a cellular connection
                                - `education` - number of peers connecting to the network from, e.g., a university network
                                - `government` - number of peers connecting to the network from known governmental IP ranges
                                - `regular` - number of peers connecting to the network from non of the above. These are most likely residential connections but could be anything else. This is different from `unknown` in the regard that we could at least identify the peers' IP and get information for it.
                              
                              You could sum the numbers of `vpn`, `tor`, and 
                              `proxy` to derive property called `anonymous`.
                              
                              The response may not contain all columns. For example,
                              if in the requested time range no peer connected via
                              a VPN, `vpn` won't appear in this array here.
                example:
                  data:
                    start: "2024-12-05T00:00:00"
                    end: "2024-12-05T02:00:00"
                    interval: 3600
                    statistic: "connection"
                    project: "celestia"
                    network: "mainnet"
                    index:
                      - "2024-12-05T00:00:00"
                      - "2024-12-05T01:00:00"
                    columns:
                      - "unknown"
                      - "vpn"
                      - "regular"
                      - "mobile"
                    values:
                      - [ 124, 17, 229, 33 ]
                      - [ 123, 17, 229, 33 ]

        '400':
          description: Bad Request
          $ref: '#/components/responses/ErrorResponse'
        '401':
          description: Unauthorized
          $ref: '#/components/responses/ErrorResponse'


  /v1/projects/celestia/networks/{network}/stats/datacenter:
    get:
      tags:
        - Celestia
      summary: Celestia peer datacenter distribution
      description: |
        This endpoint returns the number of peers we have found to interact
        from a particular datacenter.
        
        You can request multiple intervals at once by spanning a large enough time range
        with the `start` and `end` query parameters. Check the different path
        and query parameter documentation below.
        
        The maximum number of data points that this endpoint returns is `512`.
        The number of data points is derived by dividing the `start` and `end`
        time range by the `interval` duration. This is an arbitrary limitation
        and if you need different limits, let us know at [team@probelab.io](team@probelab.io).
        
        The default data points granularity (`interval`) is 1h and the
        minimum is 10 minutes. Any interval that's a multiple of 10 minutes is
        valid.
        
        Check out the documentation of the response schema to learn more about
        the idiosyncrasies of the data.

      operationId: getCelestiaDatacenter
      parameters:
        - $ref: '#/components/parameters/requestID'
        - $ref: '#/components/parameters/celestiaNetwork'
        - $ref: '#/components/parameters/start'
        - $ref: '#/components/parameters/end'
        - $ref: '#/components/parameters/nodeTypes'
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: object
                    allOf:
                      - $ref: '#/components/schemas/CommonStatisticsResponseFields'
                      - properties:
                          statistic:
                            type: string
                            description: |
                              Mirroring back the statistic that the data represents.
                              For this endpoint the value will always be `datacenter`
                          columns:
                            type: array
                            items:
                              type: string
                            description: |
                              We are currently grouping peers in the following
                              datacenter categories:
                              
                              - `AWS`
                              - `Alibaba`
                              - `Azure`
                              - `Cisco`
                              - `Contabo`
                              - `Digital Ocean`
                              - `GCP`
                              - `Hetzner`
                              - `IBM`
                              - `Linode`
                              - `OVH`
                              - `Oracle`
                              - `Rackspace`
                              - `Scaleway`
                              - `Tencent`
                              - `Verizon`
                              - `Vultr`
                              
                              If there's a provider missing from that list, please
                              reach out to [`team@probelab.io`](team@probelab.io)
                              and we will add it to the list. That being said,
                              when integrating this endpoint, don't expect this
                              list to be stable.
                              
                              This endpoint will also only return the datacenters
                              where we found peers in the specified time interval.
                              
                              All peers that run from within a cloud environment
                              and don't belong into one of the above datacenters
                              will be grouped under the `Other` key. For completeness
                              this endpoint also returns the number of peers
                              that do not run from a cloud environment. They
                              will be grouped under the `Non-Datacenter` key.
                              Finally, if there is a peer whose location we could
                              not identify, we group it under `unknown` (lower
                              case for consistency reasons with the other
                              endpoints).
                              
                              So, additionally this array will contain the keys:
                              
                              - `Other`
                              - `Non-Datacenter`
                              - `unknown`

                example:
                  data:
                    start: "2024-12-05T00:00:00"
                    end: "2024-12-05T02:00:00"
                    interval: 3600
                    statistic: "connection"
                    project: "celestia"
                    network: "mainnet"
                    index:
                      - "2024-12-05T00:00:00"
                      - "2024-12-05T01:00:00"
                    columns:
                      - "AWS"
                      - "Azure"
                      - "Hetzner"
                      - "Other"
                      - "Non-Datacenter"
                      - "unknown"
                    values:
                      - [ 124, 17, 229, 33, 6, 0 ]
                      - [ 123, 17, 229, 33, 9, 0 ]

        '400':
          description: Bad Request
          $ref: '#/components/responses/ErrorResponse'
        '401':
          description: Unauthorized
          $ref: '#/components/responses/ErrorResponse'
          
components:
  securitySchemes:
    ApiKeyAuth:
      type: apiKey
      in: header
      name: ProbeLab-API-Key

  parameters:
    celestiaNetwork:
      name: network
      in: path
      description: The network of interest. Arabica and Mocha are not supported yet.
      required: true
      schema:
        type: string
        enum: [mainnet]
    requestID:
      in: header
      name: X-Request-ID
      description: |
        When you provide the `X-Request-ID` header and encounter an issue
        with the API, please pass the ID to us and we will be better able
        to identify the root cause.
      schema:
        type: string
        format: uuid
    start:
      name: start
      in: query
      description: |
        The UTC aggregation start timestamp. In combination with the `end`
        query parameter, this endpoint will only return the aggregation of
        peers that were seen in the network within the time range spanned by
        both timestamps.
        
        If this query parameter is not provided the API will return all peers
        that were seen up until 24h before the `end` timestamp (which is set
        to `now` by default).
        
        Note that the timestamp will be rounded down to the nearest multiple
        of `interval` which is set to 3600 seconds (1h) by default.
        
        You can provide timestamps as defined by [RFC 3339](https://datatracker.ietf.org/doc/html/rfc3339)
        in the format `2006-01-02T15:04:05+07:00`. You can omit the timezone
        part `2006-01-02T15:04:05Z` (the `Z` suffix indicates UTC).

      example: "2024-11-05T10:04:30Z"
      schema:
        type: string
        format: date-time
    end:
      name: end
      in: query
      description: |
        The UTC aggregation end timestamp. By default this is set to `now()`
        truncated to the latest multiple of `interval` which is set to 3600
        seconds (1h) by default. So, if `now()` is `2025-03-14T12:36:57` and
        interval is `3600s`, `end` will become `2025-03-14T12:00:00`.

        You can provide timestamps as defined by [RFC 3339](https://datatracker.ietf.org/doc/html/rfc3339)
        in the format `2006-01-02T15:04:05+07:00`. You can omit the timezone
        part `2006-01-02T15:04:05Z` (the `Z` suffix indicates UTC).
      schema:
        type: string
        format: date-time
      example: "2024-11-05T10:04:30Z"
    interval:
      name: interval
      in: query
      description: |
        The aggregation interval in seconds. By default this is set to 3600
        (1h).

        The `start` and `end` times will be rounded down to a multiple of 
        `interval` (since the beginning of the unix epoch).

        For example, the a start or end timestamp of `2024-12-07T12:15:36`
        with an interval of `1h` will be truncated to `2024-12-07T12:00:00`.

        Further, the time range spanned by start and end will be divided
        into `interval`-sized chunks in which the aggregation happens.

        The value needs to be a multiple of the minimum interval size of
        600 seconds (10 minutes).

      schema:
        type: integer
        minimum: 600
        default: 3600
      example: "86400"
    nodeTypes:
      name: nodetypes
      in: query
      description: |
        A comma separated list of node types to filter the results by. The
        results will only contain nodes with any of the given types. The
        maximum number of node types you can define here is five.

        If no node types are specified, no filtering takes place and all
        types will be returned.
        
        Common values are:
        
        - `bridge`
        - `full`
        - `light`
        - `lumina`
        - `unknown`

      schema:
        type: array
        items:
          type: string
      example: "bridge,light"
    cityFormat:
      name: format
      in: query
      description: |
        When requesting city aggregate data each column corresponds to a
        specific city and the values the number of unique peers we found
        in this city in the given time period and interval.

        With this parameter you can control which information associated
        with each city should be returned.

        Valid values are:
          - `$continent`
          - `$country`
          - `$latitude`
          - `$longitude`
          - `$geohash`
          - `$city`

        The value for this query parameter is a comma separated list of
        the above formatting directives. There are two limitations:

        1. You cannot change the order of the format but only enable/disable
           the amount of information. For example: `$city,$country` is not allowed.
           The reason is that city names can also contain `,` characters
        2. You always need to have either the `$geohash` or `$latitude,$longitude`
           directive in the format.

        The default format is `$geohash,$city` which will return column
        values like: `u4rpzkgevr73,TjÃ¸llingvollen`.

        More information about what geohashes are on [Wikipedia](https://en.wikipedia.org/wiki/Geohash).

        The full schema `$continent,$country,$latitude,$longitude,$geohash,$city`
        would look like: `EU,FR,u09tvmyy1um8,2.349440097808838,48.85588073730469,Paris`

      schema:
        type: array
        default:
          - $geohash
          - $city
        items:
          type: string
      example: "$continent,$country,$latitude,$longitude,$geohash,$city"
  schemas:
    CommonStatisticsResponseFields:
      properties:
        start:
          type: string
          format: date-time
          description: |
            The start time used for the aggregation. This can differ
            from the provided start time. As indicated above, the
            given timestamp is rounded down to the nearest multiple
            of `interval`. This timestamp also may not match the
            first timestamp in the `index` array. This can happen
            if we don't have data points for such an early time.
            It just indicates the start of the search space.
        end:
          type: string
          format: date-time
          description: |
            The end time used for the aggregation. This can differ
            from the provided end time. As indicated above, the
            given timestamp is rounded down to the nearest multiple
            of `interval`. This timestamp also never matches the last
            timestamp in the `index` array. The last timestamp in the array
            corresponds to the last bucket of the aggregation until
            the `end` time. Therefore, the last timestamp in the
            list is usually `interval` seconds earlier than this
            `end` timestamp. If the `end` timestamp is in the
            future the difference of the last timestamp in the
            index array and this `end` value is larger accordingly.
            It just indicates the end of the search space.
        interval:
          type: integer
          description: |
            The used aggregation interval in seconds.
        project:
          type: string
          description: |
            Mirroring back the project that was aggregated.
        network:
          type: string
          description: |
            Mirroring back the network that was aggregated.
        index:
          type: array
          items:
            type: string
          description: |
            This array will contain timestamp strings in the
            [RFC 3339](https://datatracker.ietf.org/doc/html/rfc3339)
            format with seconds precision and will commonly be interpreted
            as the x-axis of a graph.
        values:
          type: array
          items:
            type: array
            items:
              type: number
          description: |
            An array of arrays. Each item in the top level array
            corresponds to a single index and each item in the
            nested array to a column.
  responses:
    ErrorResponse:
      description: A generic error response.
      content:
        application/json:
          schema:
            type: object
            properties:
              error:
                type: object
                properties:
                  message:
                    type: string
